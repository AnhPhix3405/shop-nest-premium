'use client';

import { useState, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { useSelector } from 'react-redux';
import { RootState } from '@/lib/store/types';
import { toast } from '@/components/ui/use-toast';
import { ProductService, type Product, type ProductFormData as ServiceProductFormData } from '@/lib/services/productService';
import { logout } from '@/lib/store/authSlice';
import { useAppDispatch } from '@/lib/hooks/redux';
// Types for hook
export interface ProductFormData {
  name: string;
  description: string;
  price: string;
  stock: string;
  category_id: string;
}

// useCreateProduct Hook
export const useCreateProduct = () => {
  const dispatch = useAppDispatch();

  const router = useRouter();
  const { user } = useSelector((state: RootState) => state.auth);

  // Form state
  const [formData, setFormData] = useState<ProductFormData>({
    name: '',
    description: '',
    price: '',
    stock: '',
    category_id: ''
  });

  // UI state
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [createdProduct, setCreatedProduct] = useState<Product | null>(null);

  // Mock categories (sau n√†y s·∫Ω fetch t·ª´ API)
  const categories = [
    { id: '1', name: 'ƒêi·ªán t·ª≠' },
    { id: '2', name: 'Th·ªùi trang' },
    { id: '3', name: 'Nh√† c·ª≠a & ƒê·ªùi s·ªëng' },
    { id: '4', name: 'S√°ch & VƒÉn ph√≤ng ph·∫©m' },
    { id: '5', name: 'Th·ªÉ thao & Du l·ªãch' },
    { id: '6', name: 'L√†m ƒë·∫πp & S·ª©c kh·ªèe' },
    { id: '7', name: '√î t√¥ & Xe m√°y' },
    { id: '8', name: 'Kh√°c' }
  ];

  // Handle input changes
  const handleInputChange = useCallback((field: keyof ProductFormData, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));

    // Clear error khi user nh·∫≠p l·∫°i
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: ''
      }));
    }
  }, [errors]);

  // Validation
  const validateForm = useCallback((): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.name.trim()) {
      newErrors.name = 'T√™n s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc';
    } else if (formData.name.length < 3) {
      newErrors.name = 'T√™n s·∫£n ph·∫©m ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±';
    } else if (formData.name.length > 200) {
      newErrors.name = 'T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 200 k√Ω t·ª±';
    }

    if (formData.description && formData.description.length > 5000) {
      newErrors.description = 'M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5000 k√Ω t·ª±';
    }

    const price = parseFloat(formData.price);
    if (!formData.price) {
      newErrors.price = 'Gi√° s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc';
    } else if (isNaN(price) || price <= 0) {
      newErrors.price = 'Gi√° s·∫£n ph·∫©m ph·∫£i l√† s·ªë d∆∞∆°ng';
    }

    const stock = parseInt(formData.stock);
    if (!formData.stock) {
      newErrors.stock = 'S·ªë l∆∞·ª£ng t·ªìn kho l√† b·∫Øt bu·ªôc';
    } else if (isNaN(stock) || stock < 0) {
      newErrors.stock = 'S·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng ƒë∆∞·ª£c √¢m';
    }

    if (!formData.category_id) {
      newErrors.category_id = 'Vui l√≤ng ch·ªçn danh m·ª•c';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  }, [formData]);

  // Check authentication
  const checkAuth = useCallback(() => {
    if (!user || !user.access_token) {
      toast({
        title: 'L·ªói x√°c th·ª±c',
        description: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o s·∫£n ph·∫©m.',
        variant: 'destructive'
      });
      router.push('/login');
      return false;
    }
    return true;
  }, [user, router]);

  // Submit form
  const handleSubmit = useCallback(async (e: React.FormEvent) => {
    e.preventDefault();

    if (!checkAuth()) return;
    if (!validateForm()) return;

    setIsSubmitting(true);

    try {
      // Prepare data for ProductService
      const productData: ServiceProductFormData = {
        name: formData.name.trim(),
        description: formData.description.trim(),
        price: parseFloat(formData.price),
        stock: parseInt(formData.stock),
        category_id: parseInt(formData.category_id)
      };

      console.log('üöÄ Creating product with data:', productData);

      // Use ProductService instead of direct API call
      const result = await ProductService.createProduct(productData, user!.access_token);

      // Ki·ªÉm tra result thay v√¨ d·ª±a v√†o catch
      if (!result.success) {
        // X·ª≠ l√Ω l·ªói t·ª´ service
        const backendMessage = result.message || 'ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫°o s·∫£n ph·∫©m';

        // Alert ƒë∆°n gi·∫£n hi·ªÉn th·ªã l·ªói
        if (typeof window !== 'undefined') {
          if (backendMessage === "Access token has expired") {
            alert('‚ùå L·ªói: Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            // X·ª≠ l√Ω logout v√† redirect
            dispatch(logout());
            router.push('/login');
            return;
          }
          alert(`‚ùå L·ªói: ${backendMessage}`);
        }

        toast({
          title: 'L·ªói t·∫°o s·∫£n ph·∫©m',
          description: backendMessage,
          variant: 'destructive'
        });

        return;
      }

      console.log('‚úÖ Product created successfully:', result);
      setCreatedProduct(result.data!);

      toast({
        title: 'Th√†nh c√¥ng!',
        description: `S·∫£n ph·∫©m "${result.data!.name}" ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.`,
      });

      // Reset form
      setFormData({
        name: '',
        description: '',
        price: '',
        stock: '',
        category_id: ''
      });

    } catch (error: any) {
      console.error('‚ùå Unexpected error:', error);

      // Ch·ªâ x·ª≠ l√Ω c√°c l·ªói kh√¥ng d·ª± ƒëo√°n ƒë∆∞·ª£c (network, parsing, etc.)
      const errorMessage = 'L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng th·ª≠ l·∫°i.';

      if (typeof window !== 'undefined') {
        alert(`‚ùå L·ªói: ${errorMessage}`);
      }

      toast({
        title: 'L·ªói h·ªá th·ªëng',
        description: errorMessage,
        variant: 'destructive'
      });
    } finally {
      setIsSubmitting(false);
    }
  }, [formData, validateForm, checkAuth, user]);

  // Navigation functions
  const handleUploadImages = useCallback(() => {
    if (createdProduct) {
      router.push(`/seller/products/${createdProduct.id}/upload/images`);
    }
  }, [createdProduct, router]);

  const handleViewProduct = useCallback(() => {
    if (createdProduct) {
      router.push(`/seller/products/${createdProduct.id}`);
    }
  }, [createdProduct, router]);

  const handleBackToList = useCallback(() => {
    setCreatedProduct(null);
    router.push('/seller/products');
  }, [router]);

  const resetCreatedProduct = useCallback(() => {
    setCreatedProduct(null);
  }, []);

  return {
    // State
    formData,
    isSubmitting,
    errors,
    createdProduct,
    categories,
    user,

    // Actions
    handleInputChange,
    handleSubmit,
    handleUploadImages,
    handleViewProduct,
    handleBackToList,
    resetCreatedProduct,

    // Utils
    validateForm,
    checkAuth
  };
};
