import { Search, ArrowLeft } from "lucide-react"
import { Button } from "@/components/ui/button"
import Link from "next/link"

interface NoResultsFoundProps {
  type?: "no-keyword" | "no-results"
  keyword?: string
  title?: string
  description?: string
  showBackButton?: boolean
  onRetry?: () => void
}

export default function NoResultsFound({ 
  type = "no-results", 
  keyword,
  title,
  description,
  showBackButton = false,
  onRetry 
}: NoResultsFoundProps) {
  
  const getDefaultContent = () => {
    switch (type) {
      case "no-keyword":
        return {
          title: "Nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ b·∫Øt ƒë·∫ßu t√¨m ki·∫øm",
          description: "T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n, m√¥ t·∫£ ho·∫∑c th∆∞∆°ng hi·ªáu",
          icon: (
            <div className="mx-auto w-24 h-24 text-gray-300 mb-6">
              <Search className="w-full h-full" />
            </div>
          ),
          suggestions: [
            "Th·ª≠ nh·∫≠p t√™n s·∫£n ph·∫©m c·ª• th·ªÉ",
            "S·ª≠ d·ª•ng t·ª´ kh√≥a ƒë∆°n gi·∫£n h∆°n",
            "T√¨m ki·∫øm theo th∆∞∆°ng hi·ªáu",
            "Duy·ªát qua c√°c danh m·ª•c s·∫£n ph·∫©m"
          ]
        }
      case "no-results":
      default:
        return {
          title: keyword ? `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o cho "${keyword}"` : "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o",
          description: "H√£y th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c ƒëi·ªÅu ch·ªânh b·ªô l·ªçc c·ªßa b·∫°n",
          icon: (
            <div className="mx-auto w-24 h-24 text-gray-300 mb-6">
              <svg fill="currentColor" viewBox="0 0 20 20" className="w-full h-full">
                <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd" />
              </svg>
            </div>
          ),
          suggestions: [
            "Ki·ªÉm tra ch√≠nh t·∫£ t·ª´ kh√≥a",
            "Th·ª≠ s·ª≠ d·ª•ng t·ª´ kh√≥a ng·∫Øn g·ªçn h∆°n",
            "S·ª≠ d·ª•ng t·ª´ kh√≥a chung chung h∆°n",
            "X√≥a b·ªô l·ªçc ƒë·ªÉ xem nhi·ªÅu k·∫øt qu·∫£ h∆°n"
          ]
        }
    }
  }

  const content = {
    title: title || getDefaultContent().title,
    description: description || getDefaultContent().description,
    icon: getDefaultContent().icon,
    suggestions: getDefaultContent().suggestions
  }

  return (
    <div className="text-center py-16 px-4">
      {/* Icon */}
      {content.icon}
      
      {/* Main Content */}
      <div className="max-w-md mx-auto">
        <h3 className="text-xl font-semibold text-gray-800 mb-3">
          {content.title}
        </h3>
        <p className="text-gray-600 mb-6 leading-relaxed">
          {content.description}
        </p>

        {/* Suggestions */}
        <div className="bg-gray-50 rounded-lg p-4 mb-6">
          <h4 className="font-medium text-gray-700 mb-3 text-sm">
            üí° G·ª£i √Ω cho b·∫°n:
          </h4>
          <ul className="space-y-2 text-sm text-gray-600">
            {content.suggestions.map((suggestion, index) => (
              <li key={index} className="flex items-start">
                <span className="text-blue-500 mr-2">‚Ä¢</span>
                <span>{suggestion}</span>
              </li>
            ))}
          </ul>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-3 justify-center">
          {showBackButton && (
            <Link href="/">
              <Button variant="outline" className="w-full sm:w-auto">
                <ArrowLeft className="w-4 h-4 mr-2" />
                V·ªÅ trang ch·ªß
              </Button>
            </Link>
          )}
          
          {type === "no-results" && onRetry && (
            <Button onClick={onRetry} className="w-full sm:w-auto">
              <Search className="w-4 h-4 mr-2" />
              Th·ª≠ l·∫°i
            </Button>
          )}
          
          {type === "no-keyword" && (
            <Link href="/">
              <Button className="w-full sm:w-auto">
                <Search className="w-4 h-4 mr-2" />
                Kh√°m ph√° s·∫£n ph·∫©m
              </Button>
            </Link>
          )}
        </div>

        {/* Popular Categories (for no-keyword type) */}
        {type === "no-keyword" && (
          <div className="mt-8 pt-6 border-t border-gray-200">
            <h4 className="font-medium text-gray-700 mb-4 text-sm">
              üî• Danh m·ª•c ph·ªï bi·∫øn:
            </h4>
            <div className="flex flex-wrap gap-2 justify-center">
              {[
                "ƒêi·ªán tho·∫°i",
                "Laptop", 
                "Th·ªùi trang",
                "Gi√†y d√©p",
                "ƒê·ªìng h·ªì",
                "T√∫i x√°ch"
              ].map((category) => (
                <Link 
                  key={category}
                  href={`/search?keyword=${encodeURIComponent(category)}`}
                  className="px-3 py-1 bg-blue-50 text-blue-600 rounded-full text-sm hover:bg-blue-100 transition-colors"
                >
                  {category}
                </Link>
              ))}
            </div>
          </div>
        )}

        {/* Help Text */}
        <div className="mt-6 pt-4 border-t border-gray-100">
          <p className="text-xs text-gray-500">
            C·∫ßn h·ªó tr·ª£? Li√™n h·ªá{" "}
            <Link href="/support" className="text-blue-500 hover:underline">
              Trung t√¢m h·ªó tr·ª£
            </Link>
          </p>
        </div>
      </div>
    </div>
  )
}
